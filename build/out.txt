I saw a function called main!

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 5, i32* %a, align 4
  store i32 7, i32* %b, align 4
  %2 = load i32, i32* %a, align 4
  %3 = load i32, i32* %b, align 4
  %4 = icmp sgt i32 %2, %3
  br i1 %4, label %5, label %8

; <label>:5                                       ; preds = %0
  %6 = load i32, i32* %a, align 4
  %7 = add nsw i32 %6, 3
  store i32 %7, i32* %c, align 4
  br label %9

; <label>:8                                       ; preds = %0
  br label %9

; <label>:9                                       ; preds = %8, %5
  %10 = load i32, i32* %a, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %c1, align 4
  ret i32 0
}

I saw a basic block
I saw a basic block
I saw a basic block
I saw a basic block



Expression : a + 3

Order : AVIN, AVOUT, ANTIN, ANTOUT, SAFEIN, SAFEOUT, SPAVIN, SPAVOUT, SPANTIN, SPANTOUT

-  %1 = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  %a = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  %b = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  %c = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  %c1 = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  store i32 0, i32* %1, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  store i32 5, i32* %a, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  store i32 7, i32* %b, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  %2 = load i32, i32* %a, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  %3 = load i32, i32* %b, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  %4 = icmp sgt i32 %2, %3	=> 0 0 0 0 0 0 0 0 0 0

-  br i1 %4, label %5, label %8	=> 0 0 0 0 0 0 0 0 0 0

-  %6 = load i32, i32* %a, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %7 = add nsw i32 %6, 3	=> 0 1 1 0 1 1 0 1 1 0

-  store i32 %7, i32* %c, align 4	=> 1 1 0 0 1 1 1 1 0 0

-  br label %9	=> 1 1 0 0 1 1 1 1 0 0

-  br label %9	=> 0 0 0 0 0 0 0 0 0 0

-  %10 = load i32, i32* %a, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  %11 = add nsw i32 %10, 1	=> 0 0 0 0 0 0 0 0 0 0

-  store i32 %11, i32* %c1, align 4	=> 0 0 0 0 0 0 0 0 0 0

-  ret i32 0	=> 0 0 0 0 0 0 0 0 0 0


The points of insertion are:

The edges to be considered for insertion are those between:

The points of replacement are:



Expression : a + 1

Order : AVIN, AVOUT, ANTIN, ANTOUT, SAFEIN, SAFEOUT, SPAVIN, SPAVOUT, SPANTIN, SPANTOUT

-  %1 = alloca i32, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %a = alloca i32, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %b = alloca i32, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %c = alloca i32, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %c1 = alloca i32, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  store i32 0, i32* %1, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  store i32 5, i32* %a, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  store i32 7, i32* %b, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %2 = load i32, i32* %a, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %3 = load i32, i32* %b, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %4 = icmp sgt i32 %2, %3	=> 0 0 1 1 1 1 0 0 1 1

-  br i1 %4, label %5, label %8	=> 0 0 1 1 1 1 0 0 1 1

-  %6 = load i32, i32* %a, align 4	=> 0 0 1 1 1 1 0 0 1 1

-  %7 = add nsw i32 %6, 3	=> 0 1 1 1 1 1 0 1 1 1

-  store i32 %7, i32* %c, align 4	=> 1 1 1 1 1 1 1 1 1 1

-  br label %9	=> 1 1 1 1 1 1 1 1 1 1

-  br label %9	=> 0 0 1 1 1 1 0 0 1 1

-  %10 = load i32, i32* %a, align 4	=> 0 0 1 1 1 1 1 1 1 1

-  %11 = add nsw i32 %10, 1	=> 0 1 1 0 1 1 1 1 1 0

-  store i32 %11, i32* %c1, align 4	=> 1 1 0 0 1 1 1 1 0 0

-  ret i32 0	=> 1 1 0 0 1 1 1 1 0 0


The points of insertion are:
  %7 = add nsw i32 %6, 3

The edges to be considered for insertion are those between:
  br label %9 and   %10 = load i32, i32* %a, align 4

The points of replacement are:
  %7 = add nsw i32 %6, 3
  %11 = add nsw i32 %10, 1
