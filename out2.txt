Function main

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %p = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %c = alloca i32, align 4
  %x = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 5, i32* %a, align 4
  store i32 10, i32* %b, align 4
  %2 = load i32, i32* %a, align 4
  %3 = load i32, i32* %b, align 4
  %4 = add nsw i32 %2, %3
  store i32 %4, i32* %c, align 4
  store i32 0, i32* %p, align 4
  br label %5

; <label>:5                                       ; preds = %13, %0
  %6 = load i32, i32* %p, align 4
  %7 = load i32, i32* %a, align 4
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %9, label %16

; <label>:9                                       ; preds = %5
  %10 = load i32, i32* %a, align 4
  %11 = load i32, i32* %b, align 4
  %12 = add nsw i32 %10, %11
  store i32 %12, i32* %c, align 4
  br label %13

; <label>:13                                      ; preds = %9
  %14 = load i32, i32* %p, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %p, align 4
  br label %5

; <label>:16                                      ; preds = %5
  ret i32 0
}




Expression : a + b

Order : AVIN, AVOUT, ANTIN, ANTOUT, SAFEIN, SAFEOUT, SPAVIN, SPAVOUT, SPANTIN, SPANTOUT, ANTLOC, COMP, TRANSP

-  %1 = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %a = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %b = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %p = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %d = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %e = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %c = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %x = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  store i32 0, i32* %1, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  store i32 5, i32* %a, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 0

-  store i32 10, i32* %b, align 4	=> 0 0 0 1 0 1 0 0 0 1 0 0 0

-  %2 = load i32, i32* %a, align 4	=> 0 0 1 1 1 1 0 0 1 1 0 0 1

-  %3 = load i32, i32* %b, align 4	=> 0 0 1 1 1 1 0 0 1 1 0 0 1

-  %4 = add nsw i32 %2, %3	=> 0 1 1 0 1 1 0 1 1 1 1 1 1

-  store i32 %4, i32* %c, align 4	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  store i32 0, i32* %p, align 4	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  br label %5	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  %6 = load i32, i32* %p, align 4	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  %7 = load i32, i32* %a, align 4	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  %8 = icmp slt i32 %6, %7	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  br i1 %8, label %9, label %16	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  %10 = load i32, i32* %a, align 4	=> 1 1 1 1 1 1 1 1 1 1 0 0 1

-  %11 = load i32, i32* %b, align 4	=> 1 1 1 1 1 1 1 1 1 1 0 0 1

-  %12 = add nsw i32 %10, %11	=> 1 1 1 0 1 1 1 1 1 1 1 1 1

-  store i32 %12, i32* %c, align 4	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  br label %13	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  %14 = load i32, i32* %p, align 4	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  %15 = add nsw i32 %14, 1	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  store i32 %15, i32* %p, align 4	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  br label %5	=> 1 1 0 0 1 1 1 1 1 1 0 0 1

-  ret i32 0	=> 1 1 0 0 1 1 1 1 0 0 0 0 1


The points of insertion are:
  %4 = add nsw i32 %2, %3

The edges to be considered for insertion are those between:

The points of replacement are:
  %4 = add nsw i32 %2, %3
  %12 = add nsw i32 %10, %11



Expression : p + 1

Order : AVIN, AVOUT, ANTIN, ANTOUT, SAFEIN, SAFEOUT, SPAVIN, SPAVOUT, SPANTIN, SPANTOUT, ANTLOC, COMP, TRANSP

-  %1 = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %a = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %b = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %p = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %d = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %e = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %c = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %x = alloca i32, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  store i32 0, i32* %1, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  store i32 5, i32* %a, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  store i32 10, i32* %b, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %2 = load i32, i32* %a, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %3 = load i32, i32* %b, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %4 = add nsw i32 %2, %3	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  store i32 %4, i32* %c, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  store i32 0, i32* %p, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 0

-  br label %5	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %6 = load i32, i32* %p, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %7 = load i32, i32* %a, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %8 = icmp slt i32 %6, %7	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  br i1 %8, label %9, label %16	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  %10 = load i32, i32* %a, align 4	=> 0 0 1 1 1 1 0 0 1 1 0 0 1

-  %11 = load i32, i32* %b, align 4	=> 0 0 1 1 1 1 0 0 1 1 0 0 1

-  %12 = add nsw i32 %10, %11	=> 0 0 1 1 1 1 0 0 1 1 0 0 1

-  store i32 %12, i32* %c, align 4	=> 0 0 1 1 1 1 0 0 1 1 0 0 1

-  br label %13	=> 0 0 1 1 1 1 0 0 1 1 0 0 1

-  %14 = load i32, i32* %p, align 4	=> 0 0 1 1 1 1 0 0 1 1 0 0 1

-  %15 = add nsw i32 %14, 1	=> 0 0 1 0 1 0 0 0 1 0 1 0 0

-  store i32 %15, i32* %p, align 4	=> 0 0 0 0 0 0 0 0 0 0 0 0 0

-  br label %5	=> 0 0 0 0 0 0 0 0 0 0 0 0 1

-  ret i32 0	=> 0 0 0 0 0 0 0 0 0 0 0 0 1


The points of insertion are:

The edges to be considered for insertion are those between:

The points of replacement are:
